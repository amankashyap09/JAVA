import java.util.*;
import java.util.stream.*;
import java.util.Comparator;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Part A: Sorting Employee Objects Using Lambda
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Alice", 28, 50000));
        employees.add(new Employee("Bob", 25, 60000));
        employees.add(new Employee("Charlie", 30, 55000));

        System.out.println("Employees sorted by name:");
        employees.sort((e1,e2) -> e1.name.compareTo(e2.name));
        employees.forEach(System.out::println);

        System.out.println("\nEmployees sorted by age:");
        employees.sort(Comparator.comparingInt(e -> e.age));
        employees.forEach(System.out::println);

        System.out.println("\nEmployees sorted by salary descending:");
        employees.sort((e1,e2) -> Double.compare(e2.salary, e1.salary));
        employees.forEach(System.out::println);

        // Part B: Filtering and Sorting Students Using Streams
        List<Student> students = new ArrayList<>();
        students.add(new Student("John", 80));
        students.add(new Student("Mary", 70));
        students.add(new Student("Steve", 90));
        students.add(new Student("Anna", 60));

        System.out.println("\nStudents with marks > 75, sorted by marks:");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingInt(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);

        // Part C: Stream Operations on Product Dataset
        List<Product> products = new ArrayList<>();
        products.add(new Product("Laptop", 50000, "Electronics"));
        products.add(new Product("Phone", 30000, "Electronics"));
        products.add(new Product("Shirt", 1500, "Clothing"));
        products.add(new Product("Jeans", 2000, "Clothing"));
        products.add(new Product("Headphones", 4000, "Electronics"));

        System.out.println("\nProducts grouped by category:");
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        grouped.forEach((k,v) -> System.out.println(k + ": " + v));

        System.out.println("\nMost expensive product in each category:");
        Map<String, Optional<Product>> maxPrice = products.stream()
                .collect(Collectors.groupingBy(p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))));
        maxPrice.forEach((k,v) -> System.out.println(k + ": " + v.get()));

        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage price of all products: " + avgPrice);
    }
}

class Employee {
    String name; int age; double salary;
    Employee(String n,int a,double s){ name=n; age=a; salary=s; }
    public String toString(){ return name + " " + age + " " + salary; }
}

class Student {
    String name; int marks;
    Student(String n,int m){ name=n; marks=m; }
}

class Product {
    String name; double price; String category;
    Product(String n,double p,String c){ name=n; price=p; category=c; }
    public String toString(){ return name + " " + price; }
}
